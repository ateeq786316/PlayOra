Generate a production-quality, single-page frontend website for the app "PlayOra". Follow the exact requirements below.

1) Project summary
- App: PlayOra
- Purpose: sports booking & community app marketing/landing one-page site (no backend). The page should present features, how-it-works, screenshots, blog section (editable from code), testimonials, CTA/download, contact form (front-end only), and footer.
- Tech stack requirement: React + TypeScript + Tailwind CSS (v3+), Vite or Next.js (client-only build / static export). Use TypeScript everywhere.
- Styling: Tailwind + a small global CSS file for CSS variables and theme toggling.
- Accessibility: semantic HTML, keyboard navigable, ARIA attributes where needed, contrast-aware.
- Responsiveness: must look perfect on:
  - very small phones (<=320px)
  - small phones (360px)
  - medium phones (375–425px)
  - large phones (480–768px)
  - tablets (768–1024px)
  - small laptops (1024–1366px)
  - desktops (1366–1920px+)
  - Add breakpoints: sm, md, lg, xl, 2xl and ensure every layout adapts.

2) Color & theme
- Use the following `:root` default theme exactly as variables. The website must use these variables via Tailwind CSS config (CSS variables mapped to Tailwind tokens):

:root {
  --color-primary-dark: #123315;
  --color-primary-light: #33FF33;
  --color-text-light: #FFFFFF;
  --color-accent-gold: #FFD700;
  --color-neutral-dark: #222222;
}

- The builder must wire Tailwind `theme.extend.colors` to these CSS variables (example mapping included later). Changing the values in `:root` should change the whole theme without editing components.

3) Branding, typography, and spacing
- Primary colors: black / white / green (use the variables above).
- Fonts: Use a modern sans-serif variable font (e.g., Roboto / Inter). Provide fallback stack.
- Headline scale: large bold display font sizes for hero (responsive scales).
- Spacing scale: use Tailwind spacing scale but maintain consistent vertical rhythm (space-y-6 / 8 / 12).
- Buttons: rounded-pill primary button (green background), secondary outline button (white background with green border). Provide accessible focus ring.

4) Layout & components (full list)
- Header (sticky navbar):
  - left: PlayOra logo or text mark.
  - right: nav links: Home, Features, How it Works, Screenshots, Blog, Testimonials, Download, Contact.
  - Mobile: hamburger → accessible menu (focus trap).
  - Sticky on scroll (transparent on top, solid after 20px scroll).
- Hero:
  - Full-height (above fold) hero with blurred sports background (placeholder), semi-transparent black gradient overlay.
  - Headline: “PlayOra — Book. Play. Win.”
  - Subheadline: short one-liner.
  - 2 CTAs: primary (Download Now — Play Store), secondary (Learn More — scroll).
  - Mobile hero stacks text then mockup image.
- About / Value props: two-column on desktop, single column on mobile. Icons + short bullets.
- Features: responsive grid (2 column on small, 3 on medium, 4 on large) with icons and descriptions (Ground Booking, Team Creation, Challenges, Live Chat, Reviews, Location Filtering).
- How It Works: horizontal timeline / five steps with icons and small descriptions.
- Screenshots / Demo carousel: mobile app mockups (5 slides). Provide alt text for images.
- Blog (editable from code):
  - Show latest 3 posts as cards.
  - Provide “Load more” to reveal additional posts loaded from front-end blog data file.
  - Tag filter and search input (client-side).
  - Each blog card links to an in-page modal or slide-over full article (client-only routing).
- Testimonials: slider of 3–6 testimonials, with avatar, name, location, rating.
- CTA Download section: dark background using `--color-primary-dark`, strong CTA, App Store / Play Store badges (Play Store primary).
- Contact: simple contact form (Name, Email, Message) — purely front-end (shows success toast; no submission).
- Footer: dark, logo + nav + socials + copyright.

5) Blog data & front-end API pattern (critical)
- Create a single file: `/src/data/blogs.ts` (or `/src/data/blogs.tsx`) which exports:
  - `type BlogPost = { id: string; slug: string; title: string; excerpt: string; content: string; date: string; author: { name: string; avatar?: string }; tags: string[]; cover?: string }`
  - `export const BLOGS: BlogPost[] = [ ... ]` with 6 example posts.
  - `export async function fetchBlogs({ page = 1, limit = 5, q, tag }: FetchParams): Promise<{ data: BlogPost[]; total: number }>` — this function is a front-end “API” that filters and paginates the exported array and simulates `await new Promise(r => setTimeout(r, 200))` latency (useable by controllers).
- Requirement: this file must be extremely simple to edit: add an object to the `BLOGS` array, change `content` HTML/MD (support Markdown strings optionally), and the front-end must render it.
- Also export `getBlogBySlug(slug)` and `getAllTags()` from the same file.
- Document in comments how to add a new blog (example object). Keep comments concise.

6) MVC-style project structure (frontend-only)
- Root
  - /public (images, app-icons)
  - /src
    - /assets (svg, images, logos)
    - /components (UI, Hero, Navbar, FeaturesGrid, BlogCard, BlogModal, Footer, etc.)
    - /controllers
      - blogController.ts → uses fetchBlogs, getBlogBySlug and exposes typed functions `loadBlogPage`, `searchBlogs` that components call.
    - /models
      - types.ts → shared TypeScript types (BlogPost, User, Feature, Testimonial).
    - /data
      - blogs.ts → the single editable blog data + front-end API described above.
    - /hooks (useTheme.ts, useWindowSize.ts, useModal.ts)
    - /pages or /app (if Next) or /index.tsx for Vite single-page app.
    - /styles
      - globals.css (imports Tailwind base/components/utilities + :root theme)
      - tailwind.css (if separate)
    - /utils (helpers: formatDate, slugify, sanitizeHTML)
    - tailwind.config.ts
    - postcss.config.js
    - tsconfig.json
- No /server or /api folder. All "calls" go to `/src/data/blogs.ts` via controllers.

7) Tailwind config & CSS variable mapping (provide code example)
- In `globals.css` include the :root variables exactly as provided. Example:

:root {
  --color-primary-dark: #123315;
  --color-primary-light: #33FF33;
  --color-text-light: #FFFFFF;
  --color-accent-gold: #FFD700;
  --color-neutral-dark: #222222;
}

/* optionally add light/dark variants or multiple themes here */

- In `tailwind.config.ts` map CSS vars to Tailwind colors:

export default {
  content: ['./index.html', './src/**/*.{ts,tsx,js,jsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: 'var(--color-primary-dark)',
          light: 'var(--color-primary-light)'
        },
        textLight: 'var(--color-text-light)',
        accentGold: 'var(--color-accent-gold)',
        neutralDark: 'var(--color-neutral-dark)'
      },
      // add spacing, borderRadius, boxShadow customizations
    },
  },
  plugins: [],
}

- Document: to change theme, update values under `:root`. No component edits required.

8) TypeScript & types
- Enforce `strict: true` in `tsconfig.json`.
- Provide reusable types in `/src/models/types.ts`. Example:

export type BlogPost = {
  id: string;
  slug: string;
  title: string;
  excerpt: string;
  content: string; // markdown or HTML
  date: string; // ISO
  author: { name: string; avatar?: string };
  tags: string[];
  cover?: string;
};

export type FetchParams = { page?: number; limit?: number; q?: string; tag?: string };

- Controllers and components strictly typed.

9) Blog rendering & editing convenience
- The blog list should render Markdown (use `marked` or `remark` on the client). If using a library, keep it client-only and safe (sanitize HTML). Provide a fallback: if the content string starts with `<` treat as HTML; else render Markdown.
- Blog data file comments: include copy/paste example object to add new posts.
- Provide `edit-in-code` workflow notes inside the blog data file’s top comments (e.g., how to add, slug rules, date format).

10) Simulated front-end API & caching
- The fetch functions in `/src/data/blogs.ts` should implement:
  - Filtering (q, tag), pagination (page/limit), sorting by date desc.
  - Minimal network latency simulation `await new Promise(r => setTimeout(r, 150))`.
  - Optionally export a `seedBlogsFromJSON(json)` helper for maintainers who want to bulk add posts.

11) Accessibility & SEO
- Ensure semantic headings (H1 for hero title), ARIA labels on nav, form fields, modals.
- Add `aria-live` for toast messages.
- Add `head` meta tags for SEO:
  - title: "PlayOra — Book Grounds • Build Teams • Play Together"
  - meta description: concise one-liner for PlayOra.
  - Open Graph tags: `og:title`, `og:description`, `og:image` (use a placeholder in /public).
- Provide `rel="noopener noreferrer"` for external links.

12) Animations & motion
- Use Framer Motion for:
  - hero text fade/slide
  - feature cards on scroll (staggered)
  - testimonials carousel
- Keep motion reduced for users who prefer reduced motion.

13) Performance & best practices
- Lazy-load non-critical images and screenshots (use `loading="lazy"`).
- Use optimized SVG icons or inline SVG.
- Use code-splitting for heavy components (carousel, blog modal).
- Compress images in /public and include multiple sizes for responsive `srcset`.

14) Documentation & developer notes (deliverable must include)
- README with:
  - project setup steps (install, dev, build, preview). Example for Vite: `npm install` → `npm run dev` → `npm run build` → `npm run preview`.
  - how to change theme: edit `:root` in `globals.css`.
  - how to add/edit blog posts: file path and example object.
  - how to change Tailwind primary color mapping if needed.
  - list of files to edit for play store links, meta tags, and contact email.
- Inline comments in blog data file and controllers.

15) Output format required from AI builder
- Produce the full file tree with file contents.
- Provide the final build-ready code (all files) zipped or as a repo structure (file per file).
- The single-page site must be runnable locally after `npm install` with no server required.
- The AI builder should **not** scaffold any backend endpoints or server code.

16) Sample blog data file content (exact example to include)
- Include a `/src/data/blogs.ts` file with:
  - Exported `BLOGS` array with 6 sample posts.
  - Exported `fetchBlogs`, `getBlogBySlug`, `getAllTags`.
  - Comments at top: "To add a blog: copy the object template and push to BLOGS".

Provide an example blog object in the file like:

{
  id: 'post-01',
  slug: 'how-to-book-ground-fast',
  title: 'How to Book a Ground Fast in PlayOra',
  excerpt: 'Step-by-step guide to finding and booking grounds near you.',
  content: `# How to book\n\n1. Open PlayOra...\n`,
  date: '2025-07-01T10:00:00.000Z',
  author: { name: 'Ateeq Ur Rehman' },
  tags: ['booking','guide'],
  cover: '/images/blog/book-ground.jpg'
}

17) UI copy & microcopy
- Provide succinct copy for every section — hero, features, steps, testimonial samples, blog titles, CTA copy.
- Include empty alt text suggestions for images.

18) Developer-friendly features
- Theme switcher component that toggles between default theme and an alternate dark/light set by swapping CSS variable values (via root CSS class or JS that rewrites CSS variables).
- `useTheme` hook that reads/writes theme choice to `localStorage`.
- `useWindowSize` hook to help responsive behavior.

19) Testing & linting
- Add basic ESLint + Prettier config for TypeScript.
- Add `npm test` script skeleton (optional).

20) Final delivery requirements to me (how the AI builder should respond):
- A single-page React + TypeScript project (Vite recommended) with Tailwind configured to use the CSS variables above.
- File: `/src/data/blogs.ts` fully implemented and documented.
- Clear README with setup, theme change, blog edit instructions.
- All components modular and commented.
- No backend code, no API endpoints.
- Provide sample screenshots (placeholder) in `/public` and responsive mockups.

21) Extra: Optional features (nice-to-have)
- Dark-theme toggle (theme still uses CSS variables).
- Export blog to JSON button (downloads current BLOGS array).
- Preview mode in blog editor file (commented instructions for integrated MDX support).

---

### End of prompt
Make sure the builder implements everything above exactly. Emphasize the blog file `/src/data/blogs.ts` and CSS `:root` theme variables — those are critical: the user must be able to edit the visual theme by changing `:root` and add/edit posts by editing the single blog file.

